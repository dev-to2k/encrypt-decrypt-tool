import JsonView from '@uiw/react-json-view';
import CryptoJS from 'crypto-js';
import { useState } from 'react';
import Toast from './Toast';
import './encryp-decrypt-tool.css';

const EncryptDecryptTool = () => {
  const [inputText, setInputText] = useState('');
  const [outputText, setOutputText] = useState('');
  const [secretKey, setSecretKey] = useState('Generali@EDMAPI#');
  const [error, setError] = useState('');
  const [showToast, setShowToast] = useState(false);

  const handleEncrypt = () => {
    try {
      if (!inputText.trim()) {
        setError('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn m√£ h√≥a');
        return;
      }
      
      if (!secretKey.trim()) {
        setError('Vui l√≤ng nh·∫≠p kh√≥a b√≠ m·∫≠t');
        return;
      }
      
      // Parse key nh∆∞ trong Angular service
      const key = CryptoJS.enc.Utf8.parse(secretKey);
      
      // Th·ª≠ parse JSON, n·∫øu kh√¥ng th√†nh c√¥ng th√¨ d√πng nh∆∞ string
      let textToEncrypt;
      try {
        JSON.parse(inputText.trim());
        textToEncrypt = inputText.trim();
      } catch {
        textToEncrypt = inputText.trim();
      }
      
      // Encrypt v·ªõi mode ECB v√† padding PKCS7
      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(textToEncrypt), key, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
      });
      
      // Tr·∫£ v·ªÅ ciphertext d∆∞·ªõi d·∫°ng Base64
      const result = encrypted.ciphertext.toString(CryptoJS.enc.Base64);
      setOutputText(result);
      setError('');
    } catch (err) {
      if (err instanceof Error) {
        setError('ƒê√£ x·∫£y ra l·ªói khi m√£ h√≥a: ' + err.message);
      } else {
        setError('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi m√£ h√≥a.');
      }
    }
  };

  const handleDecrypt = () => {
    try {
      if (!inputText.trim()) {
        setError('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn gi·∫£i m√£');
        return;
      }
      
      if (!secretKey.trim()) {
        setError('Vui l√≤ng nh·∫≠p kh√≥a b√≠ m·∫≠t');
        return;
      }
      
      // Parse key nh∆∞ trong Angular service
      const key = CryptoJS.enc.Utf8.parse(secretKey);
      
      // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng
      const cleanedInput = inputText.replace(/\s+/g, '');
      
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng Base64
      const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
      if (!base64Regex.test(cleanedInput)) {
        setError('ƒê·ªãnh d·∫°ng vƒÉn b·∫£n m√£ h√≥a kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
        return;
      }
      
      // T·∫°o CipherParams object t·ª´ chu·ªói Base64
      const wordArray = CryptoJS.enc.Base64.parse(cleanedInput);
      const cipherParams = CryptoJS.lib.CipherParams.create({
        ciphertext: wordArray
      });
      
      // Th·ª±c hi·ªán gi·∫£i m√£ v·ªõi mode ECB v√† padding PKCS7
      const decrypted = CryptoJS.AES.decrypt(cipherParams, key, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
      });
      
      // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh chu·ªói UTF-8
      const decryptedText = decrypted.toString(CryptoJS.enc.Utf8);
      
      if (!decryptedText) {
        throw new Error('Kh√¥ng th·ªÉ gi·∫£i m√£. Kh√≥a b√≠ m·∫≠t c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c.');
      }
      
      // Th·ª≠ parse JSON ƒë·ªÉ format ƒë·∫πp h∆°n
      try {
        const parsed = JSON.parse(decryptedText);
        if (typeof parsed === 'string') {
          setOutputText(parsed);
        } else {
          setOutputText(JSON.stringify(parsed, null, 2));
        }
      } catch {
        // N·∫øu kh√¥ng ph·∫£i JSON, hi·ªÉn th·ªã nh∆∞ chu·ªói th√¥ng th∆∞·ªùng
        setOutputText(decryptedText);
      }
      
      setError('');
    } catch (err) {
      if (err instanceof Error) {
        if (err.message.includes('Malformed UTF-8')) {
          setError('L·ªói gi·∫£i m√£: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c kh√≥a b√≠ m·∫≠t sai. Vui l√≤ng ki·ªÉm tra l·∫°i.');
        } else {
          setError('ƒê√£ x·∫£y ra l·ªói khi gi·∫£i m√£: ' + err.message);
        }
      } else {
        setError('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi gi·∫£i m√£.');
      }
    }
  };



  const handleCopy = async () => {
    try {
      let textToCopy = outputText;
      
      // N·∫øu l√† JSON, format ƒë·∫πp h∆°n
      if (isValidJson(outputText)) {
        textToCopy = JSON.stringify(JSON.parse(outputText), null, 2);
      }
      
      await navigator.clipboard.writeText(textToCopy);
      
      // Hi·ªÉn th·ªã toast
      setShowToast(true);
      setTimeout(() => setShowToast(false), 3000);
    } catch (err) {
      console.error('L·ªói khi copy:', err);
    }
  };

  const handleClear = () => {
    setInputText('');
    setOutputText('');
    setError('');
  };

  // Function to check if text is valid JSON
  const isValidJson = (text: string) => {
    try {
      JSON.parse(text);
      return true;
    } catch {
      return false;
    }
  };

  return (
    <div className="encrypt-tool-container">
      <div className="w-full">
        <div className="text-center mb-8">
          <h1 className="header-title">
            üîê C√¥ng c·ª• M√£ h√≥a/Gi·∫£i m√£
          </h1>
          <p className="header-subtitle">
            S·ª≠ d·ª•ng AES-256 ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ vƒÉn b·∫£n c·ªßa b·∫°n m·ªôt c√°ch an to√†n
          </p>
        </div>

        <div className="grid-layout">
          {/* Left Column - Input Form */}
          <div className="config-card">
            <h2 className="text-2xl font-semibold mb-6 flex-center">
              <span className="mr-2">‚öôÔ∏è</span>
              C·∫•u h√¨nh
            </h2>
            
            <div className="mb-6">
              <label htmlFor="secretKey" className="block text-sm font-semibold mb-3">
                üîë Kh√≥a b√≠ m·∫≠t
              </label>
              <div className="relative">
                <input
                  type="text"
                  id="secretKey"
                  value={secretKey}
                  onChange={(e) => setSecretKey(e.target.value)}
                  className="secret-key-input"
                  placeholder="Nh·∫≠p kh√≥a b√≠ m·∫≠t c·ªßa b·∫°n..."
                />
                <div className="absolute inset-y-0 right-0 flex-center pr-4">
                  <div className="status-indicator status-green"></div>
                </div>
              </div>
              <p className="mt-3 text-xs flex-center">
                <span className="mr-1">üí°</span>
                <span>S·ª≠ d·ª•ng c√πng m·ªôt kh√≥a b√≠ m·∫≠t ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu</span>
              </p>
            </div>

            <div className="mb-6">
              <label htmlFor="inputText" className="block text-sm font-semibold mb-3">
                üìù VƒÉn b·∫£n ƒë·∫ßu v√†o
              </label>
              <div className="relative">
                <textarea
                  id="inputText"
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  rows={10}
                  className="text-input rows-10"
                  placeholder="Nh·∫≠p vƒÉn b·∫£n, JSON ho·∫∑c d·ªØ li·ªáu c·∫ßn m√£ h√≥a/gi·∫£i m√£..."
                />
                <div className="absolute top-3 right-3">
                  {inputText && (
                    <div className={`format-badge ${
                      isValidJson(inputText) 
                        ? 'format-badge-json' 
                        : 'format-badge-text'
                    }`}>
                      {isValidJson(inputText) ? '‚úì JSON' : 'üìÑ Text'}
                    </div>
                  )}
                </div>
              </div>
              <div className="mt-3 flex-wrap gap-2 text-xs flex">
                <span className="flex-center">
                  <span className="status-indicator status-green"></span>
                  H·ªó tr·ª£ JSON format
                </span>
                <span className="flex-center">
                  <span className="status-indicator status-blue"></span>
                  Plain text
                </span>
                <span className="flex-center">
                  <span className="status-indicator status-purple"></span>
                  Base64 encoded
                </span>
              </div>
            </div>

            {error && (
              <div className="error-message">
                <div className="flex">
                  <span className="mr-2">‚ùå</span>
                  <span className="text-sm">{error}</span>
                </div>
              </div>
            )}

            <div className="flex-col justify-between gap-3">
              <button
                type="button"
                onClick={handleClear}
                className="btn-clear"
              >
                üóëÔ∏è X√≥a
              </button>
              <div className="flex-gap">
                <button
                  type="button"
                  onClick={handleEncrypt}
                  className="btn-encrypt"
                >
                  üîí M√£ h√≥a
                </button>
                <button
                  type="button"
                  onClick={handleDecrypt}
                  className="btn-decrypt"
                >
                  üîì Gi·∫£i m√£
                </button>
              </div>
            </div>
          </div>

          {/* Right Column - Output Result */}
          <div className="result-card">
            <div className="result-header">
              <div className="flex-between">
                <h2 className="text-2xl font-semibold flex-center">
                  <span className="mr-2">üìã</span>
                  K·∫øt qu·∫£
                </h2>
                {outputText && (
                  <button
                    type="button"
                    onClick={handleCopy}
                    className="btn-copy"
                  >
                    üìã Sao ch√©p
                  </button>
                )}
              </div>
            </div>
            
            <div className="p-6">
              {outputText ? (
                <div className="space-y-4">
                  {/* Result Type Indicator */}
                  <div className="flex-between">
                    <div className={`format-badge ${
                      isValidJson(outputText) 
                        ? 'format-badge-json' 
                        : 'format-badge-gray'
                    }`}>
                      {isValidJson(outputText) ? 'üéØ JSON Format' : 'üìù Text Format'}
                    </div>
                    <div className="text-xs">
                      {outputText.length} k√Ω t·ª±
                    </div>
                  </div>
                  
                  {/* JSON Viewer or Text Display */}
                  <div className="output-container">
                    {isValidJson(outputText) ? (
                      <div className="json-viewer">
                        <JsonView 
                          value={JSON.parse(outputText)}
                          style={{
                            backgroundColor: 'transparent',
                            fontSize: '14px',
                            fontFamily: 'ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace'
                          }}
                          displayDataTypes={false}
                          displayObjectSize={false}
                          enableClipboard={false}
                          collapsed={false}
                        />
                      </div>
                    ) : (
                      <div className="text-output">
                        <pre className="whitespace-pre-wrap break-words text-sm leading-relaxed font-mono">
                          {outputText}
                        </pre>
                      </div>
                    )}
                  </div>

                </div>
              ) : (
                <div className="empty-state">
                  <div className="empty-state-icon">üìÑ</div>
                  <h3 className="empty-state-title">K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</h3>
                  <p className="empty-state-description">
                    Nh·∫≠p vƒÉn b·∫£n ho·∫∑c JSON v√†o √¥ b√™n tr√°i, sau ƒë√≥ nh·∫•n <strong>M√£ h√≥a</strong> ho·∫∑c <strong>Gi·∫£i m√£</strong> ƒë·ªÉ xem k·∫øt qu·∫£
                  </p>
                  <div className="mt-6 justify-center space-x-4 text-xs flex">
                    <span className="flex-center">
                      <span className="status-indicator status-blue"></span>
                      AES-256 Encryption
                    </span>
                    <span className="flex-center">
                      <span className="status-indicator status-green"></span>
                      JSON Support
                    </span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Toast Notification */}
        <Toast 
          show={showToast} 
          message="ƒê√£ sao ch√©p th√†nh c√¥ng!" 
          type="success" 
        />
      </div>
    </div>
  );
};

export default EncryptDecryptTool;
